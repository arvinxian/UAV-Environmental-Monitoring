<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" 
		  xmlns:html="http://www.w3.org/1999/xhtml">
	<binding id="container" extends="containerbase.xml#base">
		<!-- In the content element, instead of using normal
		     div and span tag, we are using an alias version
		     of those tags.  This way if the user has a global
		     styling for all div tags, we don't pick that up.  
		     The class styles mediv does block display style 
		     which emulates a div tag rendering.  -->
		<content>
			<html:div class="outercontainer" anonid="outer">
				<html:wd3span anonid="label" class="label" style="display: none">
				</html:wd3span>
				<html:div class="container" anonid="container">
			    	<html:div><children/></html:div>
		    	</html:div>
	    	</html:div>
	    </content>
	    
	    <implementation>
	    	<field name="shouldUseLabel">false</field>
			<property name="labelText">
				<getter><![CDATA[
					return "";
				]]></getter>
			</property>
			<property name="customStyle">
				<getter><![CDATA[
					return null;
				]]></getter>
			</property>
			<property name="labelStyle">
				<getter><![CDATA[
					return null;
				]]></getter>
			</property>
			
	    	<method name="update">
	    		<body><![CDATA[
	    			var label = document.getAnonymousElementByAttribute(this, "anonid", "label");
	    			var container = document.getAnonymousElementByAttribute(this, "anonid", "container");
	    			if (this.shouldUseLabel) {
	    				label.style.display = "inline";
	    				this.updateText(this.labelText, "label");
	    				if (this.labelStyle != null && this.labelStyle != "") {
		    				label.style.cssText = this.labelStyle;
		    			}
	    				container.style.border = "1px solid !important";
	    			} else {
	    				label.style.display = "none";
	    				container.style.border = "0px solid !important";
	    			}
	    			
	    			var container = document.getAnonymousElementByAttribute(this, "anonid", "container");
	    			var customCssText = this.customStyle;
	    			if (customCssText != null && customCssText != "") {
	    				container.removeAttribute('class');
	    				container.style.cssText = customCssText;
	    			}
	    			
	    		]]>
	    		</body>
	    	</method>
	    </implementation>
	    
	    <handlers>
	    	<handler event="DOMAttrModified" phase="capturing">
	    		var target = event.target;
	    		if (target.nodeName == this.nodeName) {
	    			event.stopPropagation();
	    		}
	    	</handler>
	    </handlers>
	</binding>
</bindings>
