<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" 
		  xmlns:html="http://www.w3.org/1999/xhtml">
		  
	<binding id="unsupported" extends="simple.xml#simple">
		<content>
			<html:wd3div class="outercontainer" anonid="outer">
				<html:wd3span anonid="label" class="label" style="display: none">
				</html:wd3span>
				<html:wd3div class="container" anonid="container">
			    	<children></children>
		    	</html:wd3div>
	    	</html:wd3div>
	    </content>
	    
	    <implementation>
	    	<field name="shouldUseLabel">true</field>
			<property name="labelText">
				<getter><![CDATA[
					var tag = this.getAttribute("wd3_tagname");
					if (tag != "" && tag != null) {
						return "<"+ this.getAttribute("wd3_tagname") +">";
					} else {
						return "<"+ this.tagName +">";
					}
				]]></getter>
			</property>
			<property name="customStyle">
				<getter><![CDATA[
					return null;
				]]></getter>
			</property>
			
			<constructor><![CDATA[
				var dragHandler = function (event) {
					//var debug = document.getElementById('debug');
					//if (debug != null) debug.firstChild.data = event.type+new Date().getTime();
					event.preventDefault();
					event.stopPropagation();
					
				}
				//this.addEventListener('draggesture', dragHandler, true);
				if (this.nodeName != "DIV") {
					this.addEventListener('dragover', dragHandler, true);
					this.addEventListener('dragenter', dragHandler, true);
					this.addEventListener('dragexit', dragHandler, true);
					this.addEventListener('dragdrop', dragHandler, true);
					this.addEventListener('drop', dragHandler, true);
				}
				this.update();
			]]></constructor>
			
	    	<method name="update">
	    		<body><![CDATA[
	    			var label = document.getAnonymousElementByAttribute(this, "anonid", "label");
	    			var container = document.getAnonymousElementByAttribute(this, "anonid", "container");
	    			if (this.shouldUseLabel) {
	    				label.style.display = "inline";
	    				this.updateText(this.labelText, "label");
	    				container.style.border = "1px solid !important";
	    			} else {
	    				label.style.display = "none";
	    				container.style.border = "0px solid !important";
	    			}
	    			
	    			var container = document.getAnonymousElementByAttribute(this, "anonid", "container");
	    			var customCssText = this.customStyle;
	    			if (customCssText != null && customCssText != "") {
	    				container.removeAttribute('class');
	    				container.style.cssText = customCssText;
	    			}
	    		]]>
	    		</body>
	    	</method>
	    </implementation>
	    
	    <handlers>
	    	<handler event="DOMAttrModified" phase="capturing">
	    		var target = event.target;
	    		if (target.nodeName == this.nodeName) {
	    			event.stopPropagation();
	    		}
	    	</handler>
	    </handlers>
	</binding>
</bindings>
